HOME-FRAGMENT

-----------------------------------

// Handle Card Clicks
        view.findViewById(R.id.card_titles).setOnClickListener(v -> openBooksFragment());
        view.findViewById(R.id.card_authors).setOnClickListener(v -> openBooksFragment());
        view.findViewById(R.id.card_books).setOnClickListener(v -> openBooksFragment());

        view.findViewById(R.id.card_loaned).setOnClickListener(v -> openBookIssuesFragment("all"));
        view.findViewById(R.id.card_overdue).setOnClickListener(v -> openBookIssuesFragment("overdue"));

        // Load Data
        executorService = Executors.newSingleThreadExecutor();
        loadDataFromDatabase();

-----------------------------------

    private void openBooksFragment() {
        requireActivity().getSupportFragmentManager().beginTransaction()
                .replace(R.id.fragment_container, new LibraryFragment())
                .addToBackStack(null)
                .commit();
    }

    private void openBookIssuesFragment(String filterType) {
        Fragment fragment = BookIssuesFragment.newInstance(filterType);
        requireActivity().getSupportFragmentManager().beginTransaction()
                .replace(R.id.fragment_container, fragment)
                .addToBackStack(null)
                .commit();
    }

-----------------------------------
BookIssuesFragment
-----------------------------------

@Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_book_issues, container, false);

        recyclerView = view.findViewById(R.id.recycler_book_issues);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));

        // Initialize adapter with empty list
        bookIssuesAdapter = new BookIssuesAdapter(requireContext(), new ArrayList<>(), this::onBookIssueClicked);
        recyclerView.setAdapter(bookIssuesAdapter);

        SwitchCompat switchShowReturned = view.findViewById(R.id.switch_show_returned);
        LinearLayout filterLayout = view.findViewById(R.id.filter_layout);
        TextView filterLabel = view.findViewById(R.id.filter_label);
        ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) filterLayout.getLayoutParams();

        Context context = view.getContext(); // Store context once
        Bundle args = getArguments();

        if (args != null && "overdue".equals(args.getString("filter"))) {
            switchShowReturned.setVisibility(View.GONE); // Hide switch
            filterLabel.setText(R.string.overdue_loans);

            int margin = UiUtils.dpToPx(16, context);
            params.setMargins(margin, margin, margin, margin);
            filterLayout.setLayoutParams(params); // Apply updated layout params
        } else {
            switchShowReturned.setVisibility(View.VISIBLE); // Show switch
            filterLabel.setText(R.string.show_past_issues);

            int margin = UiUtils.dpToPx(4, context);
            params.setMargins(margin, margin, margin, margin);
            filterLayout.setLayoutParams(params); // Apply updated layout params
        }

        // Load default list (with past returns hidden)
        loadBookIssues(filter, false);

        // Toggle switch listener
        switchShowReturned.setOnCheckedChangeListener((buttonView, isChecked) -> loadBookIssues(filter, isChecked));

        return view;
    }